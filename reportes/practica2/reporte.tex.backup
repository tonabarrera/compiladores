% !TeX spellcheck = es_ES
\documentclass[titlepage]{article}
\usepackage[utf8]{inputenc}
\usepackage[letterpaper, margin=2.5cm]{geometry}
\usepackage[spanish]{babel}
\usepackage{listings}
\usepackage{url}
\usepackage{float}
\usepackage{graphicx} 
\usepackage{color}

\usepackage[nottoc,notlot,notlof]{tocbibind}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{RGB}{253,151,31}
\definecolor{deepred}{RGB}{249,38,114}

\lstset{frame=tb,
  language=Python,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  numbers=left,
  stepnumber=1,
  basicstyle={\small\ttfamily},
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=2,
  morekeywords={self, append},
  emph={Transicion, __init__, True, False, __str__, AFN, AFD, Analizador},
  emphstyle=\color{deepred}
}

\title{Reporte: Práctica 2}
\author{Barrera Pérez Carlos Tonatihu \\ Profesor: Saucedo Delgado Rafael Norman \\ Compiladores \\ Grupo: 3CM6 }
\begin{document}
  \maketitle
  \tableofcontents
  \newpage
  \section{Introducción}
  Existen diferentes formas para poder construir un automata finito no determinista a partir de una expresión regular, en esta práctica 
  se utilizo la construccion de Thomson \cite{compis} con este algoritmo cada vez que se representa algun simbolo, una union, concatenacion, 
  cerradura de Kleene o positiva se crean dos nuevos estados. El algoritmo consiste en lo siguiente:
  \begin{itemize}
   \item Para $ \epsilon $ se construyen dos estados y la transicion entre ellos se etiqueta con epsilon como en la figura \ref{fig:e}
      \begin{figure}[H]
	\begin{center}
	  \includegraphics[width=4cm]{e.png}
	  \caption{Epsilon representado en un automata.}
	  \label{fig:e}
	\end{center}
      \end{figure}
    \item Para algun simbolo del alfabeto se realiza lo mismo que para $ \epsilon $ pero esta vez se etiqueta con el respectivo simbolo como el ejemplo 
    de la figura \ref{fig:a}.
      \begin{figure}[H]
	\begin{center}
	  \includegraphics[width=4cm]{a.png}
	  \caption{Representación de la transicion de un estado a otro atravez del simbolo $a$.}
	  \label{fig:a}
	\end{center}
      \end{figure}
    \item La union de dos expresiones regulares $ s $ y $ t $ se representa a travez del uso de transiciones epsilon como se muestra en la figura 
    \ref{fig:union}.
      \begin{figure}[H]
	\begin{center}
	  \includegraphics[width=6cm]{union.png}
	  \caption{Union de dos expresiones regulares ($s|t$) representadas en un AFN-$\epsilon$.}
	  \label{fig:union}
	\end{center}
      \end{figure}
    \item La concatenación de dos expresiones regulares $ s $ y $ t $ se realiza tomando el estado inicial de la transición $ t $ y convirtiendolo 
    en el estado final de la transición producida por la expresión regular $ s $ como en la figura \ref{fig:concatenacion}.
      \begin{figure}[H]
	\begin{center}
	  \includegraphics[width=6cm]{concatenacion.png}
	  \caption{Concatenación ($st$) medinate la fusion de un estado final y uno inical respectivamente.}
	  \label{fig:concatenacion}
	\end{center}
      \end{figure}
    \item La cerradura de Kleene de una expresion regular $ s^* $ se realiza usando transiciones epsilon entre los estados que componen esta expresion. 
    Esto se muestra en la figura \ref{fig:cerradura}.
      \begin{figure}[H]
	\begin{center}
	  \includegraphics[width=6cm]{cerradura.png}
	  \caption{Cerradura ($s^*$).}
	  \label{fig:cerradura}
	\end{center}
      \end{figure}
    \item La cerradura positiva es similar a la de Kleene pero esta no realiza una transición del estado inicial al final.
  \end{itemize}
  Finalmente, para la evaluación de la expresión regular primero la pasamos a postfijo con el algoritmo shunting yard \cite{postfijo} que se utiliza para la 
  evaluación de expresiones matematicas pero adaptandolo a expresiones regulares.
  \section{Desarrollo}
  hola
  \section{Resultados}
  A continuación se presenta el resultado de la implementación de la clase \emph{Analizador} en donde se convierte una expresión regular 
  a un AFN para después evaluar algunas cadenas y ver si son validas.
  \section{Conclusiones}
  La elaboración de esta práctica fue un poco más sencilla que la anterior debido a que solo consistio en implementar el algoritmo de Thomson 
  y con ello poder construir cualquier AFN, la parte complicada de modelar este algoritmo fue la concatenación ya que requirio unos pasos extra 
  a diferencia del resto de construcciones. 
  
  Y como se pudo observar en las pruebas la conversion de expresion regular a automata se realiza correctamente. 
  Esto demuestra la versatiliad que tienen las expresiones regulares y los automatas además de que sera de 
  mucha utilidad cuando realicemos nuestro analizador lexico que su principal tarea es revisar el vocabulario de nuestro compilador.
  \bibliography{bibliografia} 
  \bibliographystyle{ieeetr}
\end{document}